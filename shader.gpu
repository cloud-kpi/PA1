
const vertexShaderSource = `
attribute vec3 vertex;        
attribute vec3 normal;     

uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;           
uniform mat4 NormalMatrix;              

varying vec3 fragNormal;     
varying vec3 fragPosition;   

void main() {
    vec4 position = ModelViewMatrix * vec4(vertex, 1.0);
    fragPosition = position.xyz;

    fragNormal = normalize((NormalMatrix * vec4(normal, 0.0)).xyz);

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}
`;


const fragmentShaderSource = `
precision mediump float;

uniform vec3 lightPosition;  // Static light position in world space
uniform vec3 ambientLight;   // Ambient light intensity
uniform vec4 color;          // Surface color
uniform vec3 viewPosition;   // Camera position in world space

varying vec3 fragNormal;     // Normal vector from vertex shader
varying vec3 fragPosition;   // World position from vertex shader

void main() {
    vec3 norm = normalize(fragNormal);

    vec3 lightDir = normalize(lightPosition - fragPosition);

    vec3 viewDir = normalize(viewPosition - fragPosition);

    vec3 ambient = ambientLight * color.rgb;

    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * color.rgb;

    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 16.0);
    vec3 specular = vec3(0.3) * spec;

    vec3 finalColor = ambient + diffuse + specular;
    gl_FragColor = vec4(finalColor, 1.0);
}
`;
